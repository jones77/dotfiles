set nocompatible
filetype off
set encoding=utf-8
scriptencoding utf-8

"" VundleBegin
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" http://liuchengxu.org/posts/use-vim-as-a-python-ide/
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'airblade/vim-gitgutter'
Plugin 'brooth/far.vim'
Plugin 'cespare/vim-toml'
Plugin 'chr4/nginx.vim'
Plugin 'chrisbra/Recover.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'exu/pgsql.vim'
Plugin 'fatih/vim-go'
Plugin 'flazz/vim-colorschemes'
Plugin 'gregsexton/gitv'
Plugin 'guns/xterm-color-table.vim'
Plugin 'hashivim/vim-terraform'
Plugin 'hashivim/vim-vagrant'
Plugin 'heavenshell/vim-pydocstring'
Plugin 'itchyny/lightline.vim'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'jparise/vim-graphql'
Plugin 'maralla/completor.vim'
Plugin 'mengelbrecht/lightline-bufferline'
Plugin 'mileszs/ack.vim'
Plugin 'mkitt/tabline.vim'
Plugin 'niklaas/lightline-gitdiff'
Plugin 'nvie/vim-flake8'
Plugin 'pangloss/vim-javascript'
Plugin 'powerline/powerline'
Plugin 'scrooloose/nerdtree'
Plugin 'sinetoami/lightline-hunks'
Plugin 'syngan/vim-vimlint'
Plugin 'thiderman/vim-supervisor'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'yuratomo/w3m.vim'
Plugin 'tpope/vim-abolish'  " https://stackoverflow.com/a/8783131/469045
Plugin 'tpope/vim-capslock'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'  " https://github.com/tpope/vim-fugitive
Plugin 'tpope/vim-obsession'
Plugin 'tpope/vim-repeat'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'vim-scripts/burnttoast256'
Plugin 'vim-syntastic/syntastic'
Plugin 'ynkdir/vim-vimlparser'
Plugin 'zhou13/vim-easyescape'
" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on
" To ignore plugin indent changes, instead use:
"   filetype plugin on
" :PluginUpdate, :PluginList, :PluginInstall - `!` also update
" :PluginSearch foo - searches for foo, `!` refresh local cache
" :PluginClean - `!` auto-approve, :h vundle - help

" set term=xterm  # FIXME: Delete this, feel like it's unnecessary.
set t_Co=256
set background=dark
colorscheme burnttoast256

let g:NERDTreeDirArrows=0
let g:NERDTreeShowHidden=1

let g:lightline = {
\   'colorscheme': 'one',
\   'separator': { 'left': '', 'right': '' },
\   'subseparator': { 'left': '', 'right': '' },
\   'tabline': {
\       'left': [ [ 'tabs' ] ],
\       'right': [ [ 'obsess' ] ]
\   },
\   'active': {
\       'left': [
\           [ 'lightline_hunks', 'mode', 'paste' ],
\           [ 'lineinfo', 'percent', 'charvaluehex', 'readonly', 'modified', 'filename' ],
\       ],
\       'right': [
\           [ 'buffers' ],
\       ]
\   },
\   'component': {
\       'charvaluehex': '0x%B',
\   },
\   'component_expand': {
\       'buffers': 'lightline#bufferline#buffers'
\   },
\   'component_function': {
\       'obsess': 'MyObsession',
\       'lightline_hunks': 'lightline#hunks#composer',
\   },
\   'component_type': {
\       'buffers': 'tabsel'
\   },
\}
function! MyObsession()
  if exists("*ObsessionStatus")
    return ObsessionStatus('ëÅç', '‡¨≠')
  endif
endfunction
command! LightlineReload call LightlineReload()
function! LightlineReload()
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#show_number = '2'
let g:lightline#bufferline#number_separator = ''
let g:lightline#bufferline#number_map = { 0: '‚ÇÄ', 1: '‚ÇÅ', 2: '‚ÇÇ', 3: '‚ÇÉ', 4: '‚ÇÑ', 5: '‚ÇÖ', 6: '‚ÇÜ', 7: '‚Çá', 8: '‚Çà', 9: '‚Çâ'}

autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()

set showtabline=2  " Make lightline work
set laststatus=2  " Make the above work
set noshowmode  " Unnecessary with lightline

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = '‚úò'
let g:syntastic_style_error_symbol = '‚úò'
let g:syntastic_warning_symbol = '‚Åà'
let g:syntastic_style_warning_symbol = '‚Åà'
let g:syntastic_python_checkers=['flake8']
let g:syntastic_sh_shellcheck_args = "-x"  " Follow source files!

let g:terraform_align=1
let g:terraform_fmt_on_save=1
autocmd FileType terraform setlocal commentstring=#%s

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

let g:sql_type_default = 'pgsql'

" vim options circa 2003
syntax on
nmap <silent> <Leader>l <Plug>(pydocstring)
set autochdir
set autoindent
set clipboard^=unnamed  " FIXME: Document this
set expandtab
set fileformat=unix
set hlsearch
set ignorecase
set nofoldenable
set number
set ruler               " show cursor position in status line
set scrolloff=4
set shiftwidth=4
set showcmd             " show partial command in status line
set showmatch           " show matching bracket
set smarttab
set softtabstop=4       " no hard tabs
set t_te= "stops vim clearing the screen
set t_vb= "who needs a visual bell anyway?
set textwidth=80
set ttyfast
set wildmode=longest,list,full
set whichwrap=b,s,,>,h,l
set wrap                " wrap lines
" :T is New Tab, Tab Left is H, Tab Right is L, Space is page down (like less)
" :B bufname<tab-complete> is open buffer in a new tab.
command! -complete=buffer -nargs=1 B :tabnew | :buffer <args>
command! -nargs=? T :tabnew
map H :tabprev<return>
map L :tabnext<return>
map <space> 
set mouse=a
map <ScrollWheelUp> <C-U>
map <ScrollWheelDown> <C-D>

" https://vi.stackexchange.com/a/19062
augroup tmux
  autocmd!
  if exists('$TMUX')
    autocmd TabEnter,BufReadPost,FileReadPost,BufNewFile,FocusGained * call system("tmux rename-window " . expand("%:t"))
    autocmd VimLeave,FocusLost * call system("tmux set-window-option automatic-rename")
    LightlineReload
  endif
augroup END

augroup LoadOnce
    " Prevent progressively slower reloading time of .vimrc
    " http://stackoverflow.com/q/15353988
    autocmd!
    autocmd bufwritepost .vimrc source $MYVIMRC
    " Trim trailing whitespace from the following filetypes.
    autocmd FileType c,cpp,graphql,h,java,md,python,ruby,sql,sh,vim,yaml,Dockerfile,Vagrantfile,Jenkinsfile
        \ autocmd BufWritePre <buffer> :%s/\s\+$//e
    autocmd BufNewFile,BufReadPost *.conf set filetype=toml
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    autocmd BufNewFile,BufReadPost Jenkinsfile set filetype=groovy
    autocmd FileType python setlocal textwidth=79
    autocmd FileType gitcommit setlocal spell textwidth=72
    autocmd FileType go set shiftwidth=4 softtabstop=4
    autocmd Filetype graphql set shiftwidth=4 softtabstop=4
    autocmd Filetype yaml set shiftwidth=2 softtabstop=2
    LightlineReload
augroup END

let g:gitgutter_override_sign_column_highlight = 0
hi GitGutterAdd    ctermfg=2 ctermbg=232
hi GitGutterChange ctermfg=3 ctermbg=232
hi GitGutterDelete ctermfg=1 ctermbg=232

hi SignColumn ctermbg=232
hi ColorColumn ctermbg=233
hi LineNr ctermfg=239 ctermbg=232
set colorcolumn=40,80,120,160,200,240,280,320
LightlineReload
