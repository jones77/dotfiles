scriptencoding utf-8
set nocompatible
set encoding=utf-8
filetype off
" TODO: Use https://github.com/junegunn/vim-plug
"" VundleBegin
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" http://liuchengxu.org/posts/use-vim-as-a-python-ide/
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'cespare/vim-toml'
Plugin 'chr4/nginx.vim'
Plugin 'chrisbra/Recover.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'davidhalter/jedi'
Plugin 'dkprice/vim-easygrep'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'exu/pgsql.vim'
Plugin 'fatih/vim-go'
Plugin 'gilsondev/searchtasks.vim'
Plugin 'guns/xterm-color-table.vim'
Plugin 'hashivim/vim-terraform'
Plugin 'hashivim/vim-vagrant'
Plugin 'heavenshell/vim-pydocstring'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'jparise/vim-graphql'
Plugin 'junegunn/gv.vim'
Plugin 'maralla/completor.vim'
Plugin 'mengelbrecht/lightline-bufferline'
Plugin 'mileszs/ack.vim'
Plugin 'mkitt/tabline.vim'
Plugin 'nvie/vim-flake8'
Plugin 'pangloss/vim-javascript'
Plugin 'scrooloose/nerdtree'
Plugin 'syngan/vim-vimlint'
Plugin 'thiderman/vim-supervisor'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'tpope/vim-abolish'  " https://stackoverflow.com/a/8783131/469045
Plugin 'tpope/vim-capslock'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-obsession'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-sensible'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'jones77/burnttoast256'
Plugin 'vim-syntastic/syntastic'
Plugin 'ynkdir/vim-vimlparser'
Plugin 'yuratomo/w3m.vim'
Plugin 'zhou13/vim-easyescape'
" Lightline
Plugin 'tpope/vim-fugitive'  " https://github.com/tpope/vim-fugitive
Plugin 'airblade/vim-gitgutter'
Plugin 'itchyny/lightline.vim'
Plugin 'sinetoami/lightline-hunks'
" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on
" To ignore plugin indent changes, instead use:
"   filetype plugin on
" :PluginUpdate, :PluginList, :PluginInstall - `!` also update
" :PluginSearch foo - searches for foo, `!` refresh local cache
" :PluginClean - `!` auto-approve, :h vundle - help

" Colors
set t_Co=256
set background=dark
colorscheme burnttoast256

" Lightline
let g:lightline = {'colorscheme': 'one',
\   'separator': { 'left': '', 'right': '' },
\   'subseparator': { 'left': '', 'right': '' },
\   'tabline': {
\       'left': [ [ 'tabs' ] ],
\       'right': [ [ 'obsess' ], ],
\   },
\   'active': {
\       'left': [
\           [ 'mode', 'paste', ],
\           [ 'lightline_hunks' ],
\           [ 'filename', 'readonly', 'modified', ],
\       ], 'right': [
\           [ 'percent', 'lineinfo' ],
\           [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ],
\       ]
\   },
\   'component': {
\       'charvaluehex': '0x%B',
\   },
\   'component_function': {
\       'lightline_hunks': 'lightline#hunks#composer',
\       'gitbranch': 'fugitive#head',
\       'obsess': 'MyObsession',
\   },
\   'component_type': {
\       'lightline_hunks': 'middle',
\   },
\}
function! MyObsession()
    if exists("*ObsessionStatus")
        return ObsessionStatus('ëÅç', '‡¨≠')
    endif
endfunction
command! LightlineReload call LightlineReload()
function! LightlineReload()
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
endfunction

augroup LoadOnce
    " Prevent progressively slower reloading time of .vimrc
    " http://stackoverflow.com/q/15353988
    autocmd!
    autocmd bufwritepost .vimrc source $MYVIMRC
    autocmd bufwritepost vimrc source $MYVIMRC
    " Trim trailing whitespace from the following filetypes.
    autocmd FileType c,cpp,graphql,h,java,md,python,ruby,sql,sh,vim,yaml,Dockerfile,Vagrantfile,Jenkinsfile
        \ autocmd BufWritePre <buffer> :%s/\s\+$//e
    " autocmd BufNewFile,BufReadPost *.conf set filetype=toml
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    autocmd BufNewFile,BufReadPost Jenkinsfile set filetype=groovy
    autocmd FileType python setlocal textwidth=79
    autocmd FileType gitcommit setlocal spell textwidth=72
    autocmd FileType go set shiftwidth=4 softtabstop=4
    autocmd Filetype graphql set shiftwidth=4 softtabstop=4
    autocmd Filetype yaml set shiftwidth=2 softtabstop=2

    if exists('$TMUX')
        " https://vi.stackexchange.com/a/19062
        autocmd TabEnter,BufEnter,BufReadPost,FileReadPost,BufNewFile,FocusGained * call system("tmux rename-window " . expand("%:t"))
        autocmd VimLeave,FocusLost * call system("tmux set-window-option automatic-rename")
        " lightline - https://github.com/mengelbrecht/lightline-bufferline/issues/5#issuecomment-293679716
    endif

    autocmd VimEnter,TabEnter,BufReadPost,BufWritePost,BufHidden,FileReadPost,FileWritePost,BufNewFile,FocusGained,FocusLost * call LightlineReload()
    call LightlineReload()
augroup END

set showtabline=2  " Make lightline work
set laststatus=2   " Make the above work
set noshowmode  " hide old-school --INSERT-- / --VISUAL-- from the command line

" Completor
let g:completor_python_binary = $JJ77_PYTHON
let g:completor_gocode_binary = $JJ77_GOLANG
let g:completor_guru_binary = 'guru'
let g:completor_go_gofmt_binary = 'goimports'
noremap <silent> <leader>d :call completor#do('definition')<CR>
noremap <silent> <leader>c :call completor#do('doc')<CR>
noremap <silent> <leader>f :call completor#do('format')<CR>
noremap <silent> <leader>s :call completor#do('hover')<CR>
" https://github.com/maralla/completor.vim#use-tab-to-trigger-completion-disable-auto-trigger
" Use TAB to complete when typing words, else inserts TABs as usual.  Uses
" dictionary, source files, and completor to find matching words to complete.
" Note: usual completion is on <C-n> but more trouble to press all the time.
" Never type the same word twice and maybe learn a new spellings!
" Use the Linux dictionary when spelling is in doubt.
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^[[:keyword:][:ident:]]'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction
" Use `tab` key to select completions.  Default is arrow keys.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" Use tab to trigger auto completion.  Default suggests completions as you type.
let g:completor_auto_trigger = 1
inoremap <expr> <Tab> Tab_Or_Complete()

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = '‚úò'
let g:syntastic_style_error_symbol = '‚úò'
let g:syntastic_warning_symbol = '‚Åà'
let g:syntastic_style_warning_symbol = '‚Åà'
let g:syntastic_python_checkers=['flake8']
let g:syntastic_sh_shellcheck_args = "-x"  " Follow source files!

" https://vim.fandom.com/wiki/Unused_keys

nmap <silent> <Leader>l <Plug>(pydocstring)

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

let g:NERDTreeDirArrows=0
let g:NERDTreeShowHidden=1

let g:terraform_align=1
let g:terraform_fmt_on_save=1
autocmd FileType terraform setlocal commentstring=#%s

let g:sql_type_default = 'pgsql'

" vim options circa 2003
syntax on
set autochdir
set autoindent
set clipboard^=unnamed  " FIXME: Document this
set expandtab
set fileformat=unix
set hlsearch
set ignorecase
set modelines=1
set nofoldenable
set number
set ruler               " show cursor position in status line
set scrolloff=4
set shiftwidth=4
set showcmd             " show partial command in status line
set showmatch           " show matching bracket
set smarttab
set softtabstop=4       " no hard tabs
set t_te= "stops vim clearing the screen
set t_vb= "who needs a visual bell anyway?
set textwidth=80
set ttyfast
set wildmode=longest,list,full
set whichwrap=b,s,,>,h,l
set wrap                " wrap lines
" :T is New Tab, Tab Left is H, Tab Right is L, Space is page down (like less)
" :B bufname<tab-complete> is open buffer in a new tab.
command! -nargs=1 -complete=buffer B :tabnew | :buffer <args>
command! -nargs=? -complete=file_in_path T :tabe <args>
command! -nargs=0 L :LightlineReload
map H :tabprev<return>
map L :tabnext<return>
map <space> 
set mouse=a
map <ScrollWheelUp> <C-U>
map <ScrollWheelDown> <C-D>
map <C-J> :ToggleBufExplorer<CR>
map <C-K> :NERDTreeToggle<CR>

" Custom Git Gutter colors.
let g:gitgutter_override_sign_column_highlight = 0
hi GitGutterAdd    ctermfg=36  ctermbg=black
hi GitGutterChange ctermfg=227 ctermbg=black
hi GitGutterDelete ctermfg=1   ctermbg=black

hi SignColumn              ctermbg=black
hi LineNr      ctermfg=239 ctermbg=black
hi ColorColumn             ctermbg=232
set colorcolumn=40,80,120,160,200,240,280,320
" vim: ts=4 sw=4 tw=0:
